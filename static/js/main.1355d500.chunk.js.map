{"version":3,"sources":["components/header/HeaderNavLink.tsx","app/hooks.ts","state/MusicGenres.tsx","state/SearchData.tsx","components/header/Header.tsx","state/MusicDetails.tsx","components/MainContainer/MusicEventDetails/musicEventDetails.tsx","components/MainContainer/MusicEventDetails/MusicEventFetch.tsx","components/MainContainer/MusicEvent/MusicEvent.tsx","components/MainContainer/MusicEvents/MusicEvents.tsx","components/footer/Footer.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["AppHeaderNavLink","React","memo","name","id","selectedId","updateId","onClick","className","useAppDispatch","useDispatch","useAppSelector","useSelector","genresIdSlice","createSlice","initialState","reducers","state","action","payload","actions","searchDataSlice","data","updateData","AppHeader","useState","results","result","setResult","genres","dispatch","useEffect","fetch","then","response","json","segment","_embedded","catch","error","console","log","updateSelecteId","onChange","e","currentTarget","value","type","placeholder","slice","map","i","detailsIdSlice","updateDetailsId","MusicEventDetails","fun","images","localTime","city","country","place","localDate","fieldRef","useRef","current","scrollIntoView","behavior","dd","String","Date","getDate","padStart","mm","getMonth","yyyy","getFullYear","ref","getDay","src","alt","MusicEventFetch","details","dates","start","venues","eventDetails","setDetails","loaded","setloaded","argument","message","undefined","TypeError","ensure","sort","a","b","width","find","item","window","innerWidth","url","MusicEvent","imgUrl","eventId","selectedDetailsId","MusicEvents","eventsEmpty","setEventsEmpty","searchData","page","totalElements","events","filter","person","toLowerCase","includes","height","Footer","smoothscroll","polyfill","App","Header","store","configureStore","reducer","genresReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVAceA,EAJ6BC,IAAMC,MAAK,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,WAAYC,EAAzB,EAAyBA,SAAzB,OACrD,sBAAMC,QAAS,kBAAMD,EAASF,IAAKI,UAAW,YAAcJ,IAAOC,EAAa,UAAY,IAA5F,SAAkGF,O,eCPvFM,EAAiB,kBAAMC,eACvBC,EAAkDC,I,OCQlDC,EAAgBC,YAAY,CACvCX,KAAM,SACNY,aAR0C,CAC1CX,GAAI,sBASJY,SAAU,CACRV,SAAU,SAACW,EAAOC,GAChBD,EAAMb,GAAKc,EAAOC,YAOVb,EAAYO,EAAcO,QAA1Bd,SAICO,IAAf,QCjBaQ,EAAkBP,YAAY,CACzCX,KAAM,aACNY,aARoC,CACpCO,KAAM,IASNN,SAAU,CACRO,WAAY,SAACN,EAAOC,GAClBD,EAAMK,KAAOJ,EAAOC,YAKZI,EAAcF,EAAgBD,QAA9BG,WAICF,IAAf,QCyCeG,EAhDavB,IAAMC,MAChC,WACE,MAA4BuB,mBAAsB,CAChDC,QAAS,KADX,mBAAOC,EAAP,KAAeC,EAAf,KAKMvB,EAAaM,GAAe,SAAAM,GAAK,OAAIA,EAAMY,OAAOzB,MAClD0B,EAAWrB,IAEjBsB,qBAAU,WACRC,MAAM,wHACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIN,EAAU,CAAEF,QAASQ,EAASE,QAAQC,UAAUR,YACjES,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,IAEH,IAAMG,EAAkB,SAACtC,GACvB0B,EAASxB,EAASF,KAOpB,OACE,yBAAQI,UAAU,aAAlB,UACE,0BAASA,UAAU,YAAnB,UACE,8CACA,sBAAKA,UAAU,SAAf,UACE,sBAAMA,UAAU,iBAChB,uBAAOmC,SAVU,SAACC,GACxBd,EAASP,EAAWqB,EAAEC,cAAcC,SASKC,KAAK,SAAS3C,GAAG,SAAS4C,YAAY,+BAI7E,sBAAMxC,UAAU,eAChB,0BAASA,UAAU,YAAnB,UACE,cAAC,EAAD,CAA8BJ,GAAI,qBAAsBD,KAAM,aAAcE,WAAYA,EAAYC,SAAUoC,GAAvF,OACtBf,EAAOD,QAAQuB,MAAM,EAAG,GAAGC,KAAI,SAACN,EAAGO,GAAJ,OAC9B,cAAC,EAAD,CAA0B/C,GAAIwC,EAAExC,GAAID,KAAMyC,EAAEzC,KAAME,WAAYA,EAAYC,SAAUoC,GAA7DS,MAEzB,cAAC,EAAD,CAA+B/C,GAAI,GAAID,KAAM,UAAWE,WAAYA,EAAYC,SAAUoC,GAAnE,iBCjDpBU,G,YAAiBtC,YAAY,CACxCX,KAAM,UACNY,aAR2C,CAC3CX,GAAI,IAQJY,SAAU,CACRqC,gBAAiB,SAACpC,EAAOC,GACvBD,EAAMb,GAAKc,EAAOC,aAOVkC,EAAmBD,EAAehC,QAAlCiC,gBAICD,IAAf,QCkDeE,EA7DmCrD,IAAMC,MACpD,YAAmE,IAH/CqD,EAGjBC,EAA+D,EAA/DA,OAAQrD,EAAuD,EAAvDA,KAAMsD,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACxCC,EAAW7D,IAAM8D,OAAyB,MAJhCR,EAKM,kCAAMO,EAASE,eAAf,aAAM,EAAkBC,eAAe,CAAEC,SAAU,YAL3BnC,oBAAUwB,EAAK,CAACA,IAO9D,IAAMzB,EAAWrB,IAcb0D,EAAKC,OAAO,IAAIC,KAAKR,GAAWS,WAAWC,SAAS,EAAG,KACvDC,EAAKJ,OAAO,IAAIC,KAAKR,GAAWY,WAAa,GAAGF,SAAS,EAAG,KAC5DG,EAAO,IAAIL,KAAKR,GAAWc,cAE/B,OACI,sBAAKC,IAAKd,EAAUtD,UAAU,6BAA6B,cAAY,kBAAvE,UACI,sBAAKA,UAAU,4BAAf,UACI,6BACKL,IAEL,sBAAKK,UAAU,4BAAf,UACI,sBAAMA,UAAU,4BAAhB,SACI,mBAAGA,UAAU,qBAEjB,yCAvBa,CACzB,SACA,UACA,YACA,WACA,SACA,WACA,UAiB0B,IAAI6D,KAAKR,GAAWgB,UADlC,aACgDV,EADhD,YACsDK,EADtD,YAC4DE,EAD5D,cACsEjB,EAAUR,MAAM,EAAG,SAG7F,sBAAKzC,UAAU,6BAAf,UACI,sBAAMA,UAAU,4BAAhB,SACI,mBAAGA,UAAU,qBAEjB,yCACQoD,EADR,aACkBF,EADlB,aAC2BC,QAG/B,qBAAKnD,UAAU,4BAAf,4VAGA,wBAAQA,UAAU,2BAA2BD,QAAS,WAzC9DuB,EAASuB,EAyCoE,MAArE,8BAIJ,sBAAK7C,UAAU,2BAAf,UACI,qBAAKA,UAAU,uBACf,qBAAKsE,IAAKtB,EAAQuB,IAAK5E,aC/BrC6E,EAA0C/E,IAAMC,MAClD,YAAa,IAAVE,EAAS,EAATA,GACC,EAAmCqB,mBAAe,CAC9CwD,QAAS,CACL9E,KAAM,GACNqD,OAAQ,GACR0B,MAAO,CACHC,MAAO,CACHtB,UAAW,GACXJ,UAAW,KAGnBpB,UAAW,CACP+C,OAAQ,OAXpB,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,EAA4B7D,oBAAkB,GAA9C,mBAAO8D,EAAP,KAAeC,EAAf,KAsBA,OApBAzD,qBAAU,WACNC,MAAM,oDAAD,OAAqD5B,EAArD,6CACA6B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACFoD,EAAW,CAAEL,QAAS/C,IACtBsD,GAAU,MAEblD,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZiD,GAAU,QAEnB,CAACpF,IAUA,cAAC,WAAD,UACKmF,GACG,cAAC,EAAD,CAAmB5B,QAAS0B,EAAaJ,QAAQ5C,UAAU+C,OAAO,GAAGzB,QAAQxD,KACzEuD,KAAM2B,EAAaJ,QAAQ5C,UAAU+C,OAAO,GAAG1B,KAAKvD,KAAMyD,MAAOyB,EAAaJ,QAAQ5C,UAAU+C,OAAO,GAAGjF,KAC1GsD,UAAW4B,EAAaJ,QAAQC,MAAMC,MAAM1B,UAAWtD,KAAMkF,EAAaJ,QAAQ9E,KAAMqD,OAZxG,SAAmBiC,GAA8F,IAA9DC,EAA6D,uDAA3C,uCACjE,QAAiBC,IAAbF,GAAuC,OAAbA,EAC1B,MAAM,IAAIG,UAAUF,GAExB,OAAOD,EAQqGI,CAAOR,EAAaJ,QAAQzB,OAAOsC,MAAK,SAASC,EAAGC,GAChJ,OAAOD,EAAEE,MAAQD,EAAEC,SACpBC,MAAK,SAAAC,GAAI,OAAIA,EAAKF,MAAQG,OAAOC,eAAcC,IAClDzC,UAAWwB,EAAaJ,QAAQC,MAAMC,MAAMtB,iBAOrDmB,IChEAuB,EApBqBtG,IAAMC,MACtC,YAAmD,IAAhDsG,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,QAAStG,EAA8B,EAA9BA,KAAMuG,EAAwB,EAAxBA,kBAEhB5E,EAAWrB,IAKjB,OACI,eAAC,WAAD,WACI,sBAAKF,QAAS,WAJlBuB,EAASuB,EAIwBoD,KAAUjG,UAAW,kBAAmB,cAAY,YAAjF,UACI,qBAAKsE,IAAK0B,EAAQzB,IAAK5E,IACtBuG,IAAsBD,GAAW,qBAAKjG,UAAU,gBAEpDkG,IAAsBD,GAAW,cAAC,EAAD,CAAiBrG,GAAIqG,UCLjEE,G,MAAwB1G,IAAMC,MAChC,WACI,MAA4BuB,mBAAiB,CACzCC,QAAS,KADb,mBAAOC,EAAP,KAAeC,EAAf,KAGA,EAAsCH,oBAAkB,GAAxD,mBAAOmF,EAAP,KAAoBC,EAApB,KACM/E,EAAWrB,IACXJ,EAAaM,GAAe,SAAAM,GAAK,OAAIA,EAAMY,OAAOzB,MAClD0G,EAAanG,GAAe,SAAAM,GAAK,OAAIA,EAAM6F,WAAWxF,QACtDoF,EAAoB/F,GAAe,SAAAM,GAAK,OAAIA,EAAMgE,QAAQ7E,MAEhE,SAASyF,EAAUJ,GAA8F,IAA9DC,EAA6D,uDAA3C,uCACjE,QAAiBC,IAAbF,GAAuC,OAAbA,EAC1B,MAAM,IAAIG,UAAUF,GAExB,OAAOD,EAoBX,OAlBA1D,qBAAU,WAINC,MAAM,oFAAD,OAAqF3B,EAArF,6CACA4B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACkC,IAAhCA,EAAS6E,KAAKC,cACdH,GAAe,IAGfjF,EAAU,CAAEF,QAASQ,EAASG,UAAU4E,SACxCJ,GAAe,OAGtBvE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAb5BT,EAASuB,EAcG,OACjB,CAAChD,EAAYyB,IAEZ,sBAAMtB,UAAU,eAAhB,SACKoG,EAAc,qBAAKpG,UAAU,eAAf,6BACX,yBAASA,UAAU,uBAAnB,SACoB,KAAfsG,EAAoBnF,EAAOD,QAAQwF,QAAO,SAAAC,GAAM,OAC7CA,EAAOhH,KAAKiH,cAAcC,SAASP,EAAWM,kBAChDlE,KAAI,SAACN,EAAGO,GAAJ,OACF,cAAC,EAAD,CAAoBqD,OAAQX,EAAOjD,EAAEY,OAAO0C,MAAK,SAAAC,GAAI,OAAoB,MAAhBA,EAAKmB,WAAiBhB,IAC3EG,QAAS7D,EAAExC,GAAID,KAAMyC,EAAEzC,KAAMuG,kBAAmBA,GADnCvD,MAEhBxB,EAAOD,QAAQwB,KAAI,SAACN,EAAGO,GAAJ,OACpB,cAAC,EAAD,CAAoBqD,OAAQX,EAAOjD,EAAEY,OAAO0C,MAAK,SAAAC,GAAI,OAAoB,MAAhBA,EAAKmB,WAAiBhB,IAC3EG,QAAS7D,EAAExC,GAAID,KAAMyC,EAAEzC,KAAMuG,kBAAmBA,GADnCvD,cAS9BwD,IC9DAY,G,MAXUtH,IAAMC,MAC7B,WAEE,OACE,wBAAQM,UAAU,aAAlB,4B,sBCANgH,EAAaC,WAYEC,MAVf,WACE,OACE,sBAAKlH,UAAU,MAAf,UACE,cAACmH,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCTOC,EAAQC,YAAe,CAClCC,QAAS,CACPjG,OAAQkG,EACR9C,QAAS7B,EACT0D,WAAWzF,KCGK2G,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAC2G,GACLA,EAAaC,gBAEdvG,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAMmD,c","file":"static/js/main.1355d500.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navLink.scss';\r\n\r\nexport type NavLink = {\r\n  name: string;\r\n  id: string;\r\n  selectedId: string\r\n  updateId: (arg: string) => void\r\n};\r\n\r\nconst AppHeaderNavLink: React.FC<NavLink> = React.memo(({ name, id, selectedId, updateId}) => (\r\n  <span onClick={() => updateId(id)} className={\"nav-link\" + (id === selectedId ? \" active\" : \"\")}>{name}</span>\r\n));\r\n\r\nexport default AppHeaderNavLink;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\nexport interface GenresSelectedIdState {\r\n  id: string;\r\n}\r\n\r\nconst initialState: GenresSelectedIdState = {\r\n  id: \"KZFzniwnSyZfZ7v7nJ\",\r\n};\r\n\r\nexport const selectGenresId = (state: RootState) => state.genres.id;\r\n\r\nexport const genresIdSlice = createSlice({\r\n  name: 'genres',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    updateId: (state, action: PayloadAction<string>) => {\r\n      state.id = action.payload;\r\n    },\r\n\r\n\r\n  },\r\n});\r\n\r\nexport const {updateId} = genresIdSlice.actions;\r\n\r\n\r\n\r\nexport default genresIdSlice.reducer;\r\n","import {createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\nexport interface SearchDataState {\r\n  data: string;\r\n}\r\n\r\nconst initialState: SearchDataState = {\r\n  data: \"\",\r\n};\r\n\r\nexport const selectData = (state: RootState) => state.searchData.data;\r\n\r\nexport const searchDataSlice = createSlice({\r\n  name: 'searchData',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    updateData: (state, action: PayloadAction<string>) => {\r\n      state.data = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {updateData} = searchDataSlice.actions;\r\n\r\n\r\n\r\nexport default searchDataSlice.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport AppHeaderNavLink from './HeaderNavLink';\r\nimport './header.scss';\r\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\r\nimport { updateId } from '../../state/MusicGenres';\r\nimport { updateData } from '../../state/SearchData';\r\n\r\nexport interface MusicGenre {\r\n  name: string;\r\n  id: string;\r\n}\r\n\r\nexport interface MusicGenres {\r\n  results: MusicGenre[];\r\n}\r\n\r\nexport interface Errors {\r\n  error: string;\r\n}\r\n\r\n\r\nconst AppHeader: React.FC = React.memo(\r\n  () => {\r\n    const [result, setResult] = useState<MusicGenres>({\r\n      results: []\r\n    });\r\n\r\n\r\n    const selectedId = useAppSelector(state => state.genres.id)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n      fetch('https://app.ticketmaster.com/discovery/v2/classifications/KZFzniwnSyZfZ7v7nJ?apikey=0JIWxBrWrDwCSXZzhD9HKwPngGfGc9fq')\r\n        .then(response => response.json())\r\n        .then(response => setResult({ results: response.segment._embedded.genres }))\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    const updateSelecteId = (id: string): void => {\r\n      dispatch(updateId(id));\r\n    }\r\n\r\n    const updateSearchData = (e: React.FormEvent<HTMLInputElement>) => {\r\n      dispatch(updateData(e.currentTarget.value));\r\n  }\r\n\r\n    return (\r\n      <header className=\"app-header\">\r\n        <section className=\"app-title\">\r\n          <h1>Music events</h1>\r\n          <div className=\"search\">\r\n            <span className=\"fa fa-search\"></span>\r\n            <input onChange={updateSearchData} type=\"search\" id=\"search\" placeholder=\"Search for events...\" />\r\n          </div>\r\n\r\n        </section>\r\n        <span className=\"fill-space\" />\r\n        <section className=\"app-links\">\r\n          <AppHeaderNavLink key={\"all\"} id={\"KZFzniwnSyZfZ7v7nJ\"} name={\"All genres\"} selectedId={selectedId} updateId={updateSelecteId} />\r\n          {result.results.slice(0, 3).map((e, i) => (\r\n            <AppHeaderNavLink key={i} id={e.id} name={e.name} selectedId={selectedId} updateId={updateSelecteId} />\r\n          ))}\r\n          <AppHeaderNavLink key={\"more\"} id={\"\"} name={\"More...\"} selectedId={selectedId} updateId={updateSelecteId} />\r\n        </section>\r\n      </header>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AppHeader;","import {createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\nexport interface DetailsSelectedIdState {\r\n  id: string;\r\n}\r\n\r\nconst initialState: DetailsSelectedIdState = {\r\n  id: \"\",\r\n};\r\n\r\nexport const selectDetails = (state: RootState) => state.details.id;\r\n\r\nexport const detailsIdSlice = createSlice({\r\n  name: 'details',\r\n  initialState,\r\n  reducers: {\r\n    updateDetailsId: (state, action: PayloadAction<string>) => {\r\n      state.id = action.payload;\r\n    },\r\n\r\n\r\n  },\r\n});\r\n\r\nexport const {updateDetailsId} = detailsIdSlice.actions;\r\n\r\n\r\n\r\nexport default detailsIdSlice.reducer;\r\n","import React, { useEffect } from 'react';\r\nimport { useAppDispatch } from '../../../app/hooks';\r\nimport './musicEventDetails.scss';\r\nimport { updateDetailsId } from '../../../state/MusicDetails';\r\n\r\nexport type EventDetails = {\r\n    images: string;\r\n    name: string,\r\n    localTime: string,\r\n    localDate: string,\r\n    city: string,\r\n    country: string,\r\n    place: string\r\n};\r\n\r\n\r\nconst useMountEffect = (fun: React.EffectCallback) => useEffect(fun, [fun]);\r\n\r\nconst MusicEventDetails: React.FC<EventDetails> = React.memo(\r\n    ({ images, name, localTime, city, country, place, localDate }) => {\r\n        const fieldRef = React.useRef<HTMLInputElement>(null);\r\n        const executeScroll = () => fieldRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n        useMountEffect(executeScroll);\r\n        const dispatch = useAppDispatch()\r\n        const updateId = (id: string): void => {\r\n            dispatch(updateDetailsId(id));\r\n        }\r\n\r\n        const items: Array<string> = [\r\n            'Monday',\r\n            'Tuesday',\r\n            'Wednesday',\r\n            'Thursday',\r\n            'Friday',\r\n            'Saturday',\r\n            'Sunday'];\r\n\r\n        var dd = String(new Date(localDate).getDate()).padStart(2, '0');\r\n        var mm = String(new Date(localDate).getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = new Date(localDate).getFullYear();\r\n\r\n        return (\r\n            <div ref={fieldRef} className=\"music-event-details__block\" data-testid=\"event-box-child\">\r\n                <div className=\"music-event-details__info\">\r\n                    <h1>\r\n                        {name}\r\n                    </h1>\r\n                    <div className=\"music-event-details__date\">\r\n                        <span className=\"music-event-details__icon\">\r\n                            <i className=\"fa fa-calendar\" />\r\n                        </span>\r\n                        <span>\r\n                            {`${items[new Date(localDate).getDay()]}, ${dd}.${mm}.${yyyy} @ ${localTime.slice(0, 5)}`}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"music-event-details__venue\">\r\n                        <span className=\"music-event-details__icon\">\r\n                            <i className=\"fa fa-building\" />\r\n                        </span>\r\n                        <span>\r\n                            {`${place}, ${city}, ${country}`}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"music-event-details__text\">\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                    </div>\r\n                    <button className=\"music-event-details__btn\" onClick={() => updateId(\"\")}>\r\n                        Close details\r\n                    </button>\r\n                </div>\r\n                <div className=\"music-event-details__img\">\r\n                    <div className=\"overlay-background\" />\r\n                    <img src={images} alt={name} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nexport default MusicEventDetails;","import React, { useEffect, useState, Fragment } from 'react';\r\nimport MusicEventDetails from './musicEventDetails';\r\n\r\nexport type EventDetails = {\r\n    id: string;\r\n};\r\n\r\n\r\nexport interface Images {\r\n    url: string\r\n    width: number\r\n}\r\n\r\nexport interface Info {\r\n    details: {\r\n        name: string,\r\n        images: Images[],\r\n        dates: {\r\n            start: {\r\n                localDate: string;\r\n                localTime: string\r\n            }\r\n        },\r\n        _embedded: {\r\n            venues: Venues[]\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport interface Venues {\r\n    name: string,\r\n    city: {\r\n        name: string\r\n    },\r\n    country: {\r\n        name: string\r\n    }\r\n}\r\n\r\n\r\nconst MusicEventFetch: React.FC<EventDetails> = React.memo(\r\n    ({ id }) => {\r\n        const [eventDetails, setDetails] = useState<Info>({\r\n            details: {\r\n                name: \"\",\r\n                images: [],\r\n                dates: {\r\n                    start: {\r\n                        localDate: \"\",\r\n                        localTime: \"\"\r\n                    }\r\n                },\r\n                _embedded: {\r\n                    venues: []\r\n                },\r\n\r\n            }\r\n        });\r\n\r\n        const [loaded, setloaded] = useState<boolean>(false);\r\n\r\n        useEffect(() => {\r\n            fetch(`https://app.ticketmaster.com/discovery/v2/events/${id}?apikey=0JIWxBrWrDwCSXZzhD9HKwPngGfGc9fq`)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    setDetails({ details: response })\r\n                    setloaded(true)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    setloaded(false)\r\n                });\r\n        }, [id]);\r\n\r\n        function ensure<T>(argument: T | undefined | null, message: string = 'This value was promised to be there.'): T {\r\n            if (argument === undefined || argument === null) {\r\n                throw new TypeError(message);\r\n            }\r\n            return argument;\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                {loaded &&\r\n                    <MusicEventDetails country={eventDetails.details._embedded.venues[0].country.name}\r\n                        city={eventDetails.details._embedded.venues[0].city.name} place={eventDetails.details._embedded.venues[0].name}\r\n                        localTime={eventDetails.details.dates.start.localTime} name={eventDetails.details.name} images={ensure(eventDetails.details.images.sort(function(a, b) {\r\n                            return a.width - b.width;\r\n                        }).find(item => item.width > window.innerWidth )).url}\r\n                        localDate={eventDetails.details.dates.start.localDate} />\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n);\r\n\r\nexport default MusicEventFetch;","import React, { Fragment } from 'react';\r\nimport { useAppDispatch } from '../../../app/hooks';\r\nimport './musicEvent.scss';\r\nimport MusicEventFetch from '../MusicEventDetails/MusicEventFetch';\r\nimport { updateDetailsId } from '../../../state/MusicDetails';\r\n\r\nexport type Event = {\r\n    imgUrl: string;\r\n    eventId: string\r\n    name: string\r\n    selectedDetailsId: string\r\n};\r\n\r\nconst MusicEvent: React.FC<Event> = React.memo(\r\n    ({ imgUrl, eventId, name, selectedDetailsId }) => {\r\n        \r\n        const dispatch = useAppDispatch()\r\n\r\n        const updateId = (id: string): void => {\r\n            dispatch(updateDetailsId(id));\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <div onClick={() => updateId(eventId)} className={\"music-event-box\"} data-testid=\"event-box\">\r\n                    <img src={imgUrl} alt={name} />\r\n                    {selectedDetailsId === eventId && <div className=\"triangle\"></div>}\r\n                </div>\r\n                {selectedDetailsId === eventId && <MusicEventFetch id={eventId} />}\r\n            </Fragment>\r\n        );\r\n    }\r\n);\r\n\r\nexport default MusicEvent;","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks'\r\nimport MusicEvent from '../MusicEvent/MusicEvent';\r\nimport './musicEvents.scss';\r\nimport { updateDetailsId } from '../../../state/MusicDetails';\r\nexport interface Event {\r\n    images: Images[]\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport interface Images {\r\n    url: string\r\n    height: number\r\n    name: string\r\n}\r\n\r\nexport interface Events {\r\n    results: Event[];\r\n}\r\n\r\n\r\nconst MusicEvents: React.FC = React.memo(\r\n    () => {\r\n        const [result, setResult] = useState<Events>({\r\n            results: []\r\n        });\r\n        const [eventsEmpty, setEventsEmpty] = useState<boolean>(false);\r\n        const dispatch = useAppDispatch()\r\n        const selectedId = useAppSelector(state => state.genres.id);\r\n        const searchData = useAppSelector(state => state.searchData.data);\r\n        const selectedDetailsId = useAppSelector(state => state.details.id)\r\n\r\n        function ensure<T>(argument: T | undefined | null, message: string = 'This value was promised to be there.'): T {\r\n            if (argument === undefined || argument === null) {\r\n                throw new TypeError(message);\r\n            }\r\n            return argument;\r\n        }\r\n        useEffect(() => {\r\n            const removeDetailsId = (id: string): void => {\r\n                dispatch(updateDetailsId(id));\r\n            }\r\n            fetch(`https://app.ticketmaster.com/discovery/v2/events?countryCode=FI&classificationId=${selectedId}&apikey=0JIWxBrWrDwCSXZzhD9HKwPngGfGc9fq`)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    if (response.page.totalElements === 0) {\r\n                        setEventsEmpty(true);\r\n                    }\r\n                    else {\r\n                        setResult({ results: response._embedded.events })\r\n                        setEventsEmpty(false);\r\n                    }\r\n                })\r\n                .catch(error => console.log(error));\r\n            removeDetailsId(\"\");\r\n        }, [selectedId, dispatch]);\r\n        return (\r\n            <main className=\"main-content\">\r\n                {eventsEmpty ? <div className=\"empty-events\">No events found</div> :\r\n                    <section className=\"music-event__wrapper\">\r\n                        {searchData !== \"\" ? result.results.filter(person =>\r\n                            person.name.toLowerCase().includes(searchData.toLowerCase())\r\n                        ).map((e, i) => (\r\n                            <MusicEvent key={i} imgUrl={ensure(e.images.find(item => item.height === 683)).url}\r\n                                eventId={e.id} name={e.name} selectedDetailsId={selectedDetailsId} />\r\n                        )) : result.results.map((e, i) => (\r\n                            <MusicEvent key={i} imgUrl={ensure(e.images.find(item => item.height === 683)).url}\r\n                                eventId={e.id} name={e.name} selectedDetailsId={selectedDetailsId} />\r\n                        ))}\r\n                    </section>}\r\n            </main>\r\n        );\r\n    }\r\n);\r\n\r\nexport default MusicEvents;","import React from 'react';\r\nimport './Footer.scss';\r\n\r\nconst Footer: React.FC = React.memo(\r\n  () => {\r\n\r\n    return (\r\n      <footer className=\"app-footer\">\r\n          Fitek 2020\r\n      </footer>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Header from './components/header/Header';\r\nimport MusicEvents from './components/MainContainer/MusicEvents/MusicEvents';\r\nimport Footer from './components/footer/Footer';\r\nimport './App.scss';\r\nimport smoothscroll from 'smoothscroll-polyfill';\r\n\r\nsmoothscroll.polyfill();\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <MusicEvents/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport genresReducer from '../state/MusicGenres';\nimport detailsIdSlice from '../state/MusicDetails';\nimport searchDataSlice from '../state/SearchData';\n\nexport const store = configureStore({\n  reducer: {\n    genres: genresReducer,\n    details: detailsIdSlice,\n    searchData:searchDataSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}